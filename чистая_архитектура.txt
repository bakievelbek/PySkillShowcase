Чистая архитектура (Clean Architecture) — это концепция в программной инженерии, предложенная Робертом Мартином
(Uncle Bob), которая направлена на создание систем с легко поддерживаемым и эволюционирующим кодом. Она стремится
минимизировать зависимости между различными частями приложения для облегчения тестирования, поддержки и обновления.
Основные Принципы Чистой Архитектуры:

    Независимость от фреймворков: Архитектура не должна зависеть от библиотек и фреймворков. Это позволяет
    использовать их как инструменты, не ограничиваясь их ограничениями.

    Тестируемость: Бизнес-логика может быть протестирована без UI, базы данных, веб-сервера или любых других
    внешних элементов.

    Независимость от UI: Изменения в пользовательском интерфейсе не должны влиять на остальную часть системы,
    а именно на бизнес-логику и другие низкоуровневые правила.

    Независимость от базы данных: Бизнес-логика не зависит от конкретной системы управления базами данных.

    Независимость от внешних агентов: Бизнес-правила не знают о внешнем мире, будь то веб-сервисы, платформы
    или устройства.

Слои Чистой Архитектуры:

    Entities (Сущности): Содержат бизнес-правила приложения и бизнес-объекты (например, объекты доменной модели).

    Use Cases (Сценарии использования): Содержат бизнес-логику приложения. Они описывают, как и когда должны
    использоваться сущности для выполнения определенных бизнес-правил и задач.

    Interface Adapters (Адаптеры интерфейсов): Преобразуют данные в удобную для сценариев использования и сущностей
    форму и наоборот для базы данных, веба и других служб.

    Frameworks and Drivers (Фреймворки и драйверы): Внешний слой, включающий в себя фреймворки, инструменты и драйверы.
     Этот слой содержит детали, специфичные для каждой платформы, включая базы данных, веб-фреймворки и библиотеки UI.

Цели Чистой Архитектуры:

    Гибкость: Упрощение изменений в программном обеспечении за счет снижения зависимости компонентов друг от друга.
    Независимость разработки: Разные команды могут работать над различными слоями одновременно с минимальным
    взаимодействием.
    Повторное использование: Более высокий потенциал повторного использования кода.
    Развертывание: Возможность развертывать слои в различных средах и конфигурациях без изменения бизнес-логики.
    Поддерживаемость: Облегчение поддержки кода за счет четкого разделения ответственности между компонентами.

Чистая архитектура предлагает гибкий подход к проектированию программного обеспечения, который может
адаптироваться к изменениям в требованиях и технологиях, сохраняя при этом код чистым, тестируемым и легко поддерживаемым.
